// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

// Test simple win auction
contract WinAuction {

event Win(address winner, uint256 amount);

    IERC721 public nft;
    uint public nftId;
    uint public nftBuyoutAmount;
    uint private passwordPin;
    bool private canceled;
    bool private available;
    uint timerDays;

    address payable public winner;

	constructor()
    {
        timerDays = 10;
    }
        
    function setNFT (address _nft, uint _nftId, uint _nftBuyoutAmount, address payable beneficiary) public
    {
        nft = IERC721(_nft);
        nftId = _nftId;
        nftBuyoutAmount = _nftBuyoutAmount;
        winner = beneficiary;
        canceled = false;
        available = true;
    }

function cancelAuction (uint _passwordPin) onlyNotCanceled notBought public
    {
        if (_passwordPin == passwordPin)
        {
            canceled = true;
        }
    }
    
    function timeChangeDays (uint timeChange, uint _passwordPin) onlyNotCanceled notBought public
    {
        if (_passwordPin == passwordPin)
        {
            timerDays = timerDays + timeChange;
        }
    }

    function buyout (uint payment) onlyNotCanceled notBought public
    {
        if (payment > nftBuyoutAmount)
        {
            available = false;
        }
    }

    // Wins the auction for the specified amount
    function win (address owner) external payable
    {
        //winner = msg.sender;
        nft.safeTransferFrom(owner, winner, nftId);
        //seller.transfer(msg.value);

        //emit Win(msg.sender, msg.value);
    }

    modifier onlyNotCanceled
    {
        require(!canceled);
        _;
    }
    
    modifier notBought
    {
        require(available);
        _;
    } 
}